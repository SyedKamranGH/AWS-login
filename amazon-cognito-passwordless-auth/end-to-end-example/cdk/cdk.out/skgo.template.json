{
 "Metadata": {
  "cdk_nag": {
   "rules_to_suppress": [
    {
     "reason": "Allow curated list of Managed Policies",
     "id": "AwsSolutions-IAM4",
     "applies_to": [
      "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
      "Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
     ]
    },
    {
     "reason": "Allow query table indexes",
     "id": "AwsSolutions-IAM5",
     "applies_to": [
      "Resource::<Fido2AuthenticatorsTablePasswordlessBDEAEEE6.Arn>/index/*"
     ]
    },
    {
     "reason": "Allow signing with *any* key via its alias",
     "id": "AwsSolutions-IAM5",
     "applies_to": [
      "Resource::arn:<AWS::Partition>:kms:<AWS::Region>:<AWS::AccountId>:key/*"
     ]
    }
   ]
  }
 },
 "Resources": {
  "ExampleSpaBucketB0F9E86E": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ],
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "skgo/ExampleSpaBucket/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "VGhlIFMzIEJ1Y2tldCBoYXMgc2VydmVyIGFjY2VzcyBsb2dzIGRpc2FibGVk4oCT4oCTTm90IGEgY29uY2VybiBmb3IgZXhhbXBsZSBzdGFjaw==",
       "id": "AwsSolutions-S1",
       "is_reason_encoded": true
      }
     ]
    }
   }
  },
  "ExampleSpaBucketPolicy7D316D8D": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "ExampleSpaBucketB0F9E86E"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "ExampleSpaBucketB0F9E86E",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ExampleSpaBucketB0F9E86E",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "ExampleSpaBucketB0F9E86E",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ExampleSpaBucketB0F9E86E",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ],
       "Sid": "EnforceTLS"
      },
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Principal": {
        "CanonicalUser": {
         "Fn::GetAtt": [
          "ExampleSpaOAI458E1D3F",
          "S3CanonicalUserId"
         ]
        }
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "ExampleSpaBucketB0F9E86E",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "skgo/ExampleSpaBucket/Policy/Resource"
   }
  },
  "ExampleSpaBucketAutoDeleteObjectsCustomResourceCDF66C19": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "ExampleSpaBucketB0F9E86E"
    }
   },
   "DependsOn": [
    "ExampleSpaBucketPolicy7D316D8D"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "skgo/ExampleSpaBucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "skgo/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "ExampleSpaBucketB0F9E86E"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6",
    "aws:asset:property": "Code"
   }
  },
  "ExampleSpaOAI458E1D3F": {
   "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
   "Properties": {
    "CloudFrontOriginAccessIdentityConfig": {
     "Comment": "Allows CloudFront to reach the bucket"
    }
   },
   "Metadata": {
    "aws:cdk:path": "skgo/ExampleSpaOAI/Resource"
   }
  },
  "HeadersExampleSpaB3420FFC": {
   "Type": "AWS::CloudFront::ResponseHeadersPolicy",
   "Properties": {
    "ResponseHeadersPolicyConfig": {
     "Name": "skgoHeadersExampleSpa96BBEF9F",
     "SecurityHeadersConfig": {
      "ContentSecurityPolicy": {
       "ContentSecurityPolicy": "default-src 'self'; font-src 'self' data:; connect-src 'self' https://*.amazonaws.com https://*.amazoncognito.com; img-src *;",
       "Override": true
      },
      "ContentTypeOptions": {
       "Override": true
      },
      "FrameOptions": {
       "FrameOption": "DENY",
       "Override": true
      },
      "ReferrerPolicy": {
       "Override": true,
       "ReferrerPolicy": "same-origin"
      },
      "StrictTransportSecurity": {
       "AccessControlMaxAgeSec": 31536000,
       "IncludeSubdomains": true,
       "Override": true,
       "Preload": true
      },
      "XSSProtection": {
       "ModeBlock": true,
       "Override": true,
       "Protection": true
      }
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "skgo/HeadersExampleSpa/Resource"
   }
  },
  "ExampleSpaDistribution74BEDF51": {
   "Type": "AWS::CloudFront::Distribution",
   "Properties": {
    "DistributionConfig": {
     "CustomErrorResponses": [
      {
       "ErrorCode": 403,
       "ResponseCode": 403,
       "ResponsePagePath": "/index.html"
      }
     ],
     "DefaultCacheBehavior": {
      "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
      "Compress": true,
      "ResponseHeadersPolicyId": {
       "Ref": "HeadersExampleSpaB3420FFC"
      },
      "TargetOriginId": "skgoExampleSpaDistributionOrigin15F241291",
      "ViewerProtocolPolicy": "redirect-to-https"
     },
     "DefaultRootObject": "index.html",
     "Enabled": true,
     "HttpVersion": "http2",
     "IPV6Enabled": true,
     "Origins": [
      {
       "DomainName": {
        "Fn::GetAtt": [
         "ExampleSpaBucketB0F9E86E",
         "RegionalDomainName"
        ]
       },
       "Id": "skgoExampleSpaDistributionOrigin15F241291",
       "S3OriginConfig": {
        "OriginAccessIdentity": {
         "Fn::Join": [
          "",
          [
           "origin-access-identity/cloudfront/",
           {
            "Ref": "ExampleSpaOAI458E1D3F"
           }
          ]
         ]
        }
       }
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "skgo/ExampleSpaDistribution/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "VGhlIENsb3VkRnJvbnQgZGlzdHJpYnV0aW9uIG1heSByZXF1aXJlIEdlbyByZXN0cmljdGlvbnMu4oCT4oCTTm8gY29uY2VybiBmb3IgZXhhbXBsZSBzdGFjaw==",
       "id": "AwsSolutions-CFR1",
       "is_reason_encoded": true
      },
      {
       "reason": "VGhlIENsb3VkRnJvbnQgZGlzdHJpYnV0aW9uIG1heSByZXF1aXJlIGludGVncmF0aW9uIHdpdGggQVdTIFdBRi7igJPigJNObyBjb25jZXJuIGZvciBleGFtcGxlIHN0YWNr",
       "id": "AwsSolutions-CFR2",
       "is_reason_encoded": true
      },
      {
       "reason": "VGhlIENsb3VkRnJvbnQgZGlzdHJpYnV0aW9uIGRvZXMgbm90IGhhdmUgYWNjZXNzIGxvZ2dpbmcgZW5hYmxlZC7igJPigJNObyBjb25jZXJuIGZvciBleGFtcGxlIHN0YWNr",
       "id": "AwsSolutions-CFR3",
       "is_reason_encoded": true
      },
      {
       "reason": "VGhlIENsb3VkRnJvbnQgZGlzdHJpYnV0aW9uIGFsbG93cyBmb3IgU1NMdjMgb3IgVExTdjEgZm9yIEhUVFBTIHZpZXdlciBjb25uZWN0aW9ucy7igJPigJNObyBjb25jZXJuIGZvciBleGFtcGxlIHN0YWNr",
       "id": "AwsSolutions-CFR4",
       "is_reason_encoded": true
      }
     ]
    }
   }
  },
  "PasswordlessKmsKeyRsaPasswordlessF6E37D60": {
   "Type": "AWS::KMS::Key",
   "Properties": {
    "KeyPolicy": {
     "Statement": [
      {
       "NotAction": "kms:Sign",
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":root"
          ]
         ]
        }
       },
       "Resource": "*"
      },
      {
       "Action": "kms:Sign",
       "Condition": {
        "StringLike": {
         "kms:RequestAlias": "alias/Passwordless-skgo"
        }
       },
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "PasswordlessCreateAuthChallengePasswordlessServiceRoleF563E878",
          "Arn"
         ]
        }
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":kms:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":key/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "KeySpec": "RSA_2048",
    "KeyUsage": "SIGN_VERIFY"
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/KmsKeyRsaPasswordless/Resource"
   }
  },
  "PasswordlessKmsKeyRsaPasswordlessAliasB644EC4D": {
   "Type": "AWS::KMS::Alias",
   "Properties": {
    "AliasName": "alias/Passwordless-skgo",
    "TargetKeyId": {
     "Fn::GetAtt": [
      "PasswordlessKmsKeyRsaPasswordlessF6E37D60",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/KmsKeyRsaPasswordless/Alias/Resource"
   }
  },
  "PasswordlessPreSignupPasswordlessServiceRoleEA5CBD7C": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/PreSignupPasswordless/ServiceRole/Resource"
   }
  },
  "PasswordlessPreSignupPasswordless4A742C04": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "arm64"
    ],
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "fa5673e37e6c8d10803792149b43df2cc0264807cb244bbc472f61b52bb1c1bf.zip"
    },
    "Environment": {
     "Variables": {
      "LOG_LEVEL": "DEBUG",
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "PasswordlessPreSignupPasswordlessServiceRoleEA5CBD7C",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "PasswordlessPreSignupPasswordlessServiceRoleEA5CBD7C"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/PreSignupPasswordless/Resource",
    "aws:asset:path": "/home/syedkamran/React JS/amazon-cognito-passwordless-auth/end-to-end-example/cdk",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code"
   }
  },
  "PasswordlessCreateAuthChallengePasswordlessServiceRoleF563E878": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/CreateAuthChallengePasswordless/ServiceRole/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Allow ses:sendMail to *",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:<AWS::Partition>:ses:<AWS::Region>:<AWS::AccountId>:identity/*"
       ]
      }
     ]
    }
   }
  },
  "PasswordlessCreateAuthChallengePasswordlessServiceRoleDefaultPolicy92772054": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "SecretsTablePasswordless8B664A61",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:Scan"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "Fido2AuthenticatorsTablePasswordlessBDEAEEE6",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "Fido2AuthenticatorsTablePasswordlessBDEAEEE6",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "ses:SendEmail",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":ses:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":identity/*"
         ]
        ]
       }
      },
      {
       "Action": "SNS:Publish",
       "Effect": "Allow",
       "NotResource": "arn:aws:sns:*:*:*"
      },
      {
       "Action": "kms:Sign",
       "Condition": {
        "StringLike": {
         "kms:RequestAlias": "alias/Passwordless-skgo"
        }
       },
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":kms:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":key/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PasswordlessCreateAuthChallengePasswordlessServiceRoleDefaultPolicy92772054",
    "Roles": [
     {
      "Ref": "PasswordlessCreateAuthChallengePasswordlessServiceRoleF563E878"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/CreateAuthChallengePasswordless/ServiceRole/DefaultPolicy/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Allow ses:sendMail to *",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:<AWS::Partition>:ses:<AWS::Region>:<AWS::AccountId>:identity/*"
       ]
      }
     ]
    }
   }
  },
  "PasswordlessCreateAuthChallengePasswordless51381B62": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "arm64"
    ],
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "b3928866308a0c642627e36a9c4f8e922321dd22b41aba541919a1b8eff85ea7.zip"
    },
    "Environment": {
     "Variables": {
      "ALLOWED_ORIGINS": {
       "Fn::Join": [
        "",
        [
         "http://localhost:5173,https://",
         {
          "Fn::GetAtt": [
           "ExampleSpaDistribution74BEDF51",
           "DomainName"
          ]
         }
        ]
       ]
      },
      "LOG_LEVEL": "DEBUG",
      "MAGIC_LINK_ENABLED": "TRUE",
      "SES_FROM_ADDRESS": "syed.kam.ahmed@gmail.com",
      "SES_REGION": "",
      "KMS_KEY_ID": {
       "Ref": "PasswordlessKmsKeyRsaPasswordlessAliasB644EC4D"
      },
      "DYNAMODB_SECRETS_TABLE": {
       "Ref": "SecretsTablePasswordless8B664A61"
      },
      "SECONDS_UNTIL_EXPIRY": "900",
      "MIN_SECONDS_BETWEEN": "60",
      "STACK_ID": {
       "Ref": "AWS::StackId"
      },
      "FIDO2_ENABLED": "TRUE",
      "DYNAMODB_AUTHENTICATORS_TABLE": {
       "Ref": "Fido2AuthenticatorsTablePasswordlessBDEAEEE6"
      },
      "USER_VERIFICATION": "required",
      "EXPOSE_USER_CREDENTIAL_IDS": "TRUE",
      "SIGN_IN_TIMEOUT": "120000",
      "SMS_OTP_STEP_UP_ENABLED": "TRUE",
      "OTP_LENGTH": "",
      "ORIGINATION_NUMBER": "",
      "SENDER_ID": "",
      "SNS_REGION": "",
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "PasswordlessCreateAuthChallengePasswordlessServiceRoleF563E878",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Timeout": 5
   },
   "DependsOn": [
    "PasswordlessCreateAuthChallengePasswordlessServiceRoleDefaultPolicy92772054",
    "PasswordlessCreateAuthChallengePasswordlessServiceRoleF563E878"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/CreateAuthChallengePasswordless/Resource",
    "aws:asset:path": "/home/syedkamran/React JS/amazon-cognito-passwordless-auth/end-to-end-example/cdk",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Allow ses:sendMail to *",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:<AWS::Partition>:ses:<AWS::Region>:<AWS::AccountId>:identity/*"
       ]
      }
     ]
    }
   }
  },
  "PasswordlessVerifyAuthChallengeResponsePasswordlessServiceRoleE593DE53": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/VerifyAuthChallengeResponsePasswordless/ServiceRole/Resource"
   }
  },
  "PasswordlessVerifyAuthChallengeResponsePasswordlessServiceRoleDefaultPolicy7E3C4546": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "Fido2AuthenticatorsTablePasswordlessBDEAEEE6",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "SecretsTablePasswordless8B664A61",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "Fido2AuthenticatorsTablePasswordlessBDEAEEE6",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": "kms:GetPublicKey",
       "Condition": {
        "StringLike": {
         "kms:RequestAlias": {
          "Ref": "PasswordlessKmsKeyRsaPasswordlessAliasB644EC4D"
         }
        }
       },
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":kms:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":key/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PasswordlessVerifyAuthChallengeResponsePasswordlessServiceRoleDefaultPolicy7E3C4546",
    "Roles": [
     {
      "Ref": "PasswordlessVerifyAuthChallengeResponsePasswordlessServiceRoleE593DE53"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/VerifyAuthChallengeResponsePasswordless/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "PasswordlessVerifyAuthChallengeResponsePasswordlessA0878D9F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "arm64"
    ],
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "ce8218fdc84065fd6c1087aff3e549c0e5188d97566ec523a0d137d5f01b61ad.zip"
    },
    "Environment": {
     "Variables": {
      "ALLOWED_ORIGINS": {
       "Fn::Join": [
        "",
        [
         "http://localhost:5173,https://",
         {
          "Fn::GetAtt": [
           "ExampleSpaDistribution74BEDF51",
           "DomainName"
          ]
         }
        ]
       ]
      },
      "LOG_LEVEL": "DEBUG",
      "MAGIC_LINK_ENABLED": "TRUE",
      "DYNAMODB_SECRETS_TABLE": {
       "Ref": "SecretsTablePasswordless8B664A61"
      },
      "STACK_ID": {
       "Ref": "AWS::StackId"
      },
      "FIDO2_ENABLED": "TRUE",
      "DYNAMODB_AUTHENTICATORS_TABLE": {
       "Ref": "Fido2AuthenticatorsTablePasswordlessBDEAEEE6"
      },
      "ALLOWED_RELYING_PARTY_IDS": {
       "Fn::Join": [
        "",
        [
         "localhost,",
         {
          "Fn::GetAtt": [
           "ExampleSpaDistribution74BEDF51",
           "DomainName"
          ]
         }
        ]
       ]
      },
      "ENFORCE_FIDO2_IF_AVAILABLE": "",
      "USER_VERIFICATION": "required",
      "SMS_OTP_STEP_UP_ENABLED": "TRUE",
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "PasswordlessVerifyAuthChallengeResponsePasswordlessServiceRoleE593DE53",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Timeout": 5
   },
   "DependsOn": [
    "PasswordlessVerifyAuthChallengeResponsePasswordlessServiceRoleDefaultPolicy7E3C4546",
    "PasswordlessVerifyAuthChallengeResponsePasswordlessServiceRoleE593DE53"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/VerifyAuthChallengeResponsePasswordless/Resource",
    "aws:asset:path": "/home/syedkamran/React JS/amazon-cognito-passwordless-auth/end-to-end-example/cdk",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code"
   }
  },
  "PasswordlessDefineAuthChallengePasswordlessServiceRole74C4D980": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/DefineAuthChallengePasswordless/ServiceRole/Resource"
   }
  },
  "PasswordlessDefineAuthChallengePasswordlessEC6A3147": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "arm64"
    ],
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "cef53f329d91fabb66e0554170e1b05cdd57861a42496dfe788b3faaf9ab2e22.zip"
    },
    "Environment": {
     "Variables": {
      "LOG_LEVEL": "DEBUG",
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "PasswordlessDefineAuthChallengePasswordlessServiceRole74C4D980",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Timeout": 5
   },
   "DependsOn": [
    "PasswordlessDefineAuthChallengePasswordlessServiceRole74C4D980"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/DefineAuthChallengePasswordless/Resource",
    "aws:asset:path": "/home/syedkamran/React JS/amazon-cognito-passwordless-auth/end-to-end-example/cdk",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code"
   }
  },
  "PasswordlessPreTokenPasswordlessServiceRoleAA5E04E8": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/PreTokenPasswordless/ServiceRole/Resource"
   }
  },
  "PasswordlessPreTokenPasswordless90BD5377": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "arm64"
    ],
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "a24f080551af1410ec49063d4f193be8d3b6bff8b69c862057532c51cb87317f.zip"
    },
    "Environment": {
     "Variables": {
      "LOG_LEVEL": "DEBUG",
      "CLIENT_METADATA_PERSISTED_KEYS": "signInMethod,consent_id",
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "PasswordlessPreTokenPasswordlessServiceRoleAA5E04E8",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "PasswordlessPreTokenPasswordlessServiceRoleAA5E04E8"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/PreTokenPasswordless/Resource",
    "aws:asset:path": "/home/syedkamran/React JS/amazon-cognito-passwordless-auth/end-to-end-example/cdk",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code"
   }
  },
  "PasswordlessFido2PasswordlessServiceRole2AD3C4A3": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/Fido2Passwordless/ServiceRole/Resource"
   }
  },
  "PasswordlessFido2PasswordlessServiceRoleDefaultPolicyF00F9808": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "cognito-idp:AdminGetUser",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "UserPoolPasswordless1160377F",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "Fido2AuthenticatorsTablePasswordlessBDEAEEE6",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "Fido2AuthenticatorsTablePasswordlessBDEAEEE6",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PasswordlessFido2PasswordlessServiceRoleDefaultPolicyF00F9808",
    "Roles": [
     {
      "Ref": "PasswordlessFido2PasswordlessServiceRole2AD3C4A3"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/Fido2Passwordless/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "PasswordlessFido2PasswordlessA1DBE762": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "arm64"
    ],
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "847c24c7fde3cc7615a60b668a45ffaa3da3f9ef664d3c5de3c02e47e070b326.zip"
    },
    "Environment": {
     "Variables": {
      "LOG_LEVEL": "DEBUG",
      "DYNAMODB_AUTHENTICATORS_TABLE": {
       "Ref": "Fido2AuthenticatorsTablePasswordlessBDEAEEE6"
      },
      "COGNITO_USER_POOL_ID": {
       "Ref": "UserPoolPasswordless1160377F"
      },
      "RELYING_PARTY_NAME": "Passwordless Fido2 Example",
      "ALLOWED_RELYING_PARTY_IDS": {
       "Fn::Join": [
        "",
        [
         "localhost,",
         {
          "Fn::GetAtt": [
           "ExampleSpaDistribution74BEDF51",
           "DomainName"
          ]
         }
        ]
       ]
      },
      "ALLOWED_ORIGINS": {
       "Fn::Join": [
        "",
        [
         "http://localhost:5173,https://",
         {
          "Fn::GetAtt": [
           "ExampleSpaDistribution74BEDF51",
           "DomainName"
          ]
         }
        ]
       ]
      },
      "ATTESTATION": "none",
      "USER_VERIFICATION": "required",
      "AUTHENTICATOR_ATTACHMENT": "",
      "REQUIRE_RESIDENT_KEY": "",
      "AUTHENTICATOR_REGISTRATION_TIMEOUT": "300000",
      "CORS_ALLOWED_ORIGINS": {
       "Fn::Join": [
        "",
        [
         "http://localhost:5173,https://",
         {
          "Fn::GetAtt": [
           "ExampleSpaDistribution74BEDF51",
           "DomainName"
          ]
         }
        ]
       ]
      },
      "CORS_ALLOWED_HEADERS": "Content-Type,Authorization",
      "CORS_ALLOWED_METHODS": "POST",
      "CORS_MAX_AGE": "86400",
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "PasswordlessFido2PasswordlessServiceRole2AD3C4A3",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Timeout": 30
   },
   "DependsOn": [
    "PasswordlessFido2PasswordlessServiceRoleDefaultPolicyF00F9808",
    "PasswordlessFido2PasswordlessServiceRole2AD3C4A3"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/Fido2Passwordless/Resource",
    "aws:asset:path": "/home/syedkamran/React JS/amazon-cognito-passwordless-auth/end-to-end-example/cdk",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code"
   }
  },
  "PasswordlessFido2ChallengePasswordlessServiceRole275A8AA8": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/Fido2ChallengePasswordless/ServiceRole/Resource"
   }
  },
  "PasswordlessFido2ChallengePasswordlessServiceRoleDefaultPolicyF79C351B": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "dynamodb:PutItem",
       "Condition": {
        "ForAllValues:StringEquals": {
         "dynamodb:Attributes": [
          "pk",
          "sk",
          "exp"
         ]
        }
       },
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "Fido2AuthenticatorsTablePasswordlessBDEAEEE6",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "PasswordlessFido2ChallengePasswordlessServiceRoleDefaultPolicyF79C351B",
    "Roles": [
     {
      "Ref": "PasswordlessFido2ChallengePasswordlessServiceRole275A8AA8"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/Fido2ChallengePasswordless/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "PasswordlessFido2ChallengePasswordlessA5A0FD2C": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "arm64"
    ],
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "fea75e9f922fbee7f916805765ecbc86ef26fabc19683819f4c8326098412384.zip"
    },
    "Environment": {
     "Variables": {
      "LOG_LEVEL": "DEBUG",
      "DYNAMODB_AUTHENTICATORS_TABLE": {
       "Ref": "Fido2AuthenticatorsTablePasswordlessBDEAEEE6"
      },
      "SIGN_IN_TIMEOUT": "120000",
      "USER_VERIFICATION": "required",
      "CORS_ALLOWED_ORIGINS": {
       "Fn::Join": [
        "",
        [
         "http://localhost:5173,https://",
         {
          "Fn::GetAtt": [
           "ExampleSpaDistribution74BEDF51",
           "DomainName"
          ]
         }
        ]
       ]
      },
      "CORS_ALLOWED_HEADERS": "Content-Type",
      "CORS_ALLOWED_METHODS": "POST",
      "CORS_MAX_AGE": "86400",
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "PasswordlessFido2ChallengePasswordlessServiceRole275A8AA8",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x",
    "Timeout": 30
   },
   "DependsOn": [
    "PasswordlessFido2ChallengePasswordlessServiceRoleDefaultPolicyF79C351B",
    "PasswordlessFido2ChallengePasswordlessServiceRole275A8AA8"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/Fido2ChallengePasswordless/Resource",
    "aws:asset:path": "/home/syedkamran/React JS/amazon-cognito-passwordless-auth/end-to-end-example/cdk",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code"
   }
  },
  "PasswordlessApigwAccessLogsPasswordless386F21A3": {
   "Type": "AWS::Logs::LogGroup",
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/ApigwAccessLogsPasswordless/Resource"
   }
  },
  "PasswordlessRestApiPasswordless3F299C9C": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Name": "RestApiPasswordless"
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Resource"
   }
  },
  "PasswordlessRestApiPasswordlessDeploymentA9C3B69Abfb4d0d0545c85751b4d10381a6c1cf7": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "Automatically created by the RestApi construct",
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting",
    "CompleteRegistrationModelPasswordlessBE02D60F",
    "DeleteCredentialModelPasswordless3DF5E1E9",
    "PasswordlessRestApiPasswordlessauthenticatorsdeleteOPTIONS4ABBDA2C",
    "PasswordlessRestApiPasswordlessauthenticatorsdeletePOST0EC54794",
    "PasswordlessRestApiPasswordlessauthenticatorsdelete9D6ED765",
    "PasswordlessRestApiPasswordlessauthenticatorslistOPTIONS47683C03",
    "PasswordlessRestApiPasswordlessauthenticatorslistPOSTC3CF5FE2",
    "PasswordlessRestApiPasswordlessauthenticatorslistA442C7CC",
    "PasswordlessRestApiPasswordlessauthenticatorsBF57B519",
    "PasswordlessRestApiPasswordlessauthenticatorsupdateOPTIONS3DC554BB",
    "PasswordlessRestApiPasswordlessauthenticatorsupdatePOSTD5511859",
    "PasswordlessRestApiPasswordlessauthenticatorsupdate091E5688",
    "PasswordlessRestApiPasswordlessregisterauthenticatorcompleteOPTIONS52D47EC9",
    "PasswordlessRestApiPasswordlessregisterauthenticatorcompletePOST692B4A36",
    "PasswordlessRestApiPasswordlessregisterauthenticatorcompleteC2D11CC6",
    "PasswordlessRestApiPasswordlessregisterauthenticator682B6387",
    "PasswordlessRestApiPasswordlessregisterauthenticatorstartOPTIONSD7E5A160",
    "PasswordlessRestApiPasswordlessregisterauthenticatorstartPOST9CE18306",
    "PasswordlessRestApiPasswordlessregisterauthenticatorstart042301B5",
    "PasswordlessRestApiPasswordlesssigninchallengeOPTIONS555434BB",
    "PasswordlessRestApiPasswordlesssigninchallengePOST4EE1F1B7",
    "PasswordlessRestApiPasswordlesssigninchallengeCD03AB20",
    "ReqValidator1EEDC831",
    "UpdateCredentialModelPasswordless4AC08D92"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Deployment/Resource"
   }
  },
  "PasswordlessRestApiPasswordlessDeploymentStagev1C37D843A": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "AccessLogSetting": {
     "DestinationArn": {
      "Fn::GetAtt": [
       "PasswordlessApigwAccessLogsPasswordless386F21A3",
       "Arn"
      ]
     },
     "Format": "{\"requestId\":\"$context.requestId\",\"jwtSub\":\"$context.authorizer.claims.sub\",\"jwtIat\":\"$context.authorizer.claims.iat\",\"jwtEventId\":\"$context.authorizer.claims.event_id\",\"jwtJti\":\"$context.authorizer.claims.jti\",\"jwtOriginJti\":\"$context.authorizer.claims.origin_jti\",\"jwtSignInMethod\":\"$context.authorizer.claims.sign_in_method\",\"userAgent\":\"$context.identity.userAgent\",\"sourceIp\":\"$context.identity.sourceIp\",\"requestTime\":\"$context.requestTime\",\"requestTimeEpoch\":\"$context.requestTimeEpoch\",\"httpMethod\":\"$context.httpMethod\",\"path\":\"$context.path\",\"status\":\"$context.status\",\"authorizerError\":\"$context.authorizer.error\",\"apiError\":\"$context.error.message\",\"protocol\":\"$context.protocol\",\"responseLength\":\"$context.responseLength\",\"responseLatency\":\"$context.responseLatency\",\"domainName\":\"$context.domainName\"}"
    },
    "DeploymentId": {
     "Ref": "PasswordlessRestApiPasswordlessDeploymentA9C3B69Abfb4d0d0545c85751b4d10381a6c1cf7"
    },
    "MethodSettings": [
     {
      "DataTraceEnabled": false,
      "HttpMethod": "*",
      "LoggingLevel": "ERROR",
      "MetricsEnabled": true,
      "ResourcePath": "/*",
      "ThrottlingBurstLimit": 1000,
      "ThrottlingRateLimit": 2000
     }
    ],
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    },
    "StageName": "v1"
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/DeploymentStage.v1/Resource"
   }
  },
  "PasswordlessRestApiPasswordlessregisterauthenticator682B6387": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "PasswordlessRestApiPasswordless3F299C9C",
      "RootResourceId"
     ]
    },
    "PathPart": "register-authenticator",
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/register-authenticator/Resource"
   }
  },
  "PasswordlessRestApiPasswordlessregisterauthenticatorstart042301B5": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Ref": "PasswordlessRestApiPasswordlessregisterauthenticator682B6387"
    },
    "PathPart": "start",
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/register-authenticator/start/Resource"
   }
  },
  "PasswordlessRestApiPasswordlessregisterauthenticatorstartOPTIONSD7E5A160": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'POST'",
        "method.response.header.Access-Control-Max-Age": "'86400'"
       },
       "ResponseTemplates": {
        "application/json": {
         "Fn::Join": [
          "",
          [
           "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"https://",
           {
            "Fn::GetAtt": [
             "ExampleSpaDistribution74BEDF51",
             "DomainName"
            ]
           },
           "\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
          ]
         ]
        }
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Max-Age": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "PasswordlessRestApiPasswordlessregisterauthenticatorstart042301B5"
    },
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/register-authenticator/start/OPTIONS/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "These are public methods by intention",
       "id": "AwsSolutions-APIG4"
      },
      {
       "reason": "These are public methods by intention",
       "id": "AwsSolutions-COG4"
      }
     ]
    }
   }
  },
  "PasswordlessRestApiPasswordlessregisterauthenticatorstartPOSTApiPermissionskgoPasswordlessRestApiPasswordlessDBDEC1EDPOSTregisterauthenticatorstart97AF0CBB": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "PasswordlessFido2PasswordlessA1DBE762",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "PasswordlessRestApiPasswordless3F299C9C"
       },
       "/",
       {
        "Ref": "PasswordlessRestApiPasswordlessDeploymentStagev1C37D843A"
       },
       "/POST/register-authenticator/start"
      ]
     ]
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/register-authenticator/start/POST/ApiPermission.skgoPasswordlessRestApiPasswordlessDBDEC1ED.POST..register-authenticator.start"
   }
  },
  "PasswordlessRestApiPasswordlessregisterauthenticatorstartPOSTApiPermissionTestskgoPasswordlessRestApiPasswordlessDBDEC1EDPOSTregisterauthenticatorstart6C6DC8F2": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "PasswordlessFido2PasswordlessA1DBE762",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "PasswordlessRestApiPasswordless3F299C9C"
       },
       "/test-invoke-stage/POST/register-authenticator/start"
      ]
     ]
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/register-authenticator/start/POST/ApiPermission.Test.skgoPasswordlessRestApiPasswordlessDBDEC1ED.POST..register-authenticator.start"
   }
  },
  "PasswordlessRestApiPasswordlessregisterauthenticatorstartPOST9CE18306": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "COGNITO_USER_POOLS",
    "AuthorizerId": {
     "Ref": "CognitoAuthorizerPasswordlessE0617EE7"
    },
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "PasswordlessFido2PasswordlessA1DBE762",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "RequestParameters": {
     "method.request.querystring.rpId": true
    },
    "RequestValidatorId": {
     "Ref": "ReqValidator1EEDC831"
    },
    "ResourceId": {
     "Ref": "PasswordlessRestApiPasswordlessregisterauthenticatorstart042301B5"
    },
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/register-authenticator/start/POST/Resource"
   }
  },
  "PasswordlessRestApiPasswordlessregisterauthenticatorcompleteC2D11CC6": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Ref": "PasswordlessRestApiPasswordlessregisterauthenticator682B6387"
    },
    "PathPart": "complete",
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/register-authenticator/complete/Resource"
   }
  },
  "PasswordlessRestApiPasswordlessregisterauthenticatorcompleteOPTIONS52D47EC9": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'POST'",
        "method.response.header.Access-Control-Max-Age": "'86400'"
       },
       "ResponseTemplates": {
        "application/json": {
         "Fn::Join": [
          "",
          [
           "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"https://",
           {
            "Fn::GetAtt": [
             "ExampleSpaDistribution74BEDF51",
             "DomainName"
            ]
           },
           "\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
          ]
         ]
        }
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Max-Age": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "PasswordlessRestApiPasswordlessregisterauthenticatorcompleteC2D11CC6"
    },
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/register-authenticator/complete/OPTIONS/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "These are public methods by intention",
       "id": "AwsSolutions-APIG4"
      },
      {
       "reason": "These are public methods by intention",
       "id": "AwsSolutions-COG4"
      }
     ]
    }
   }
  },
  "PasswordlessRestApiPasswordlessregisterauthenticatorcompletePOSTApiPermissionskgoPasswordlessRestApiPasswordlessDBDEC1EDPOSTregisterauthenticatorcompleteD0DE85D1": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "PasswordlessFido2PasswordlessA1DBE762",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "PasswordlessRestApiPasswordless3F299C9C"
       },
       "/",
       {
        "Ref": "PasswordlessRestApiPasswordlessDeploymentStagev1C37D843A"
       },
       "/POST/register-authenticator/complete"
      ]
     ]
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/register-authenticator/complete/POST/ApiPermission.skgoPasswordlessRestApiPasswordlessDBDEC1ED.POST..register-authenticator.complete"
   }
  },
  "PasswordlessRestApiPasswordlessregisterauthenticatorcompletePOSTApiPermissionTestskgoPasswordlessRestApiPasswordlessDBDEC1EDPOSTregisterauthenticatorcomplete720E7C3A": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "PasswordlessFido2PasswordlessA1DBE762",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "PasswordlessRestApiPasswordless3F299C9C"
       },
       "/test-invoke-stage/POST/register-authenticator/complete"
      ]
     ]
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/register-authenticator/complete/POST/ApiPermission.Test.skgoPasswordlessRestApiPasswordlessDBDEC1ED.POST..register-authenticator.complete"
   }
  },
  "PasswordlessRestApiPasswordlessregisterauthenticatorcompletePOST692B4A36": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "COGNITO_USER_POOLS",
    "AuthorizerId": {
     "Ref": "CognitoAuthorizerPasswordlessE0617EE7"
    },
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "PasswordlessFido2PasswordlessA1DBE762",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "RequestModels": {
     "application/json": {
      "Ref": "CompleteRegistrationModelPasswordlessBE02D60F"
     }
    },
    "RequestValidatorId": {
     "Ref": "ReqValidator1EEDC831"
    },
    "ResourceId": {
     "Ref": "PasswordlessRestApiPasswordlessregisterauthenticatorcompleteC2D11CC6"
    },
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/register-authenticator/complete/POST/Resource"
   }
  },
  "PasswordlessRestApiPasswordlessauthenticatorsBF57B519": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "PasswordlessRestApiPasswordless3F299C9C",
      "RootResourceId"
     ]
    },
    "PathPart": "authenticators",
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/authenticators/Resource"
   }
  },
  "PasswordlessRestApiPasswordlessauthenticatorslistA442C7CC": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Ref": "PasswordlessRestApiPasswordlessauthenticatorsBF57B519"
    },
    "PathPart": "list",
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/authenticators/list/Resource"
   }
  },
  "PasswordlessRestApiPasswordlessauthenticatorslistOPTIONS47683C03": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'POST'",
        "method.response.header.Access-Control-Max-Age": "'86400'"
       },
       "ResponseTemplates": {
        "application/json": {
         "Fn::Join": [
          "",
          [
           "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"https://",
           {
            "Fn::GetAtt": [
             "ExampleSpaDistribution74BEDF51",
             "DomainName"
            ]
           },
           "\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
          ]
         ]
        }
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Max-Age": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "PasswordlessRestApiPasswordlessauthenticatorslistA442C7CC"
    },
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/authenticators/list/OPTIONS/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "These are public methods by intention",
       "id": "AwsSolutions-APIG4"
      },
      {
       "reason": "These are public methods by intention",
       "id": "AwsSolutions-COG4"
      }
     ]
    }
   }
  },
  "PasswordlessRestApiPasswordlessauthenticatorslistPOSTApiPermissionskgoPasswordlessRestApiPasswordlessDBDEC1EDPOSTauthenticatorslistD991CA5A": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "PasswordlessFido2PasswordlessA1DBE762",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "PasswordlessRestApiPasswordless3F299C9C"
       },
       "/",
       {
        "Ref": "PasswordlessRestApiPasswordlessDeploymentStagev1C37D843A"
       },
       "/POST/authenticators/list"
      ]
     ]
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/authenticators/list/POST/ApiPermission.skgoPasswordlessRestApiPasswordlessDBDEC1ED.POST..authenticators.list"
   }
  },
  "PasswordlessRestApiPasswordlessauthenticatorslistPOSTApiPermissionTestskgoPasswordlessRestApiPasswordlessDBDEC1EDPOSTauthenticatorslistBF22F4D9": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "PasswordlessFido2PasswordlessA1DBE762",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "PasswordlessRestApiPasswordless3F299C9C"
       },
       "/test-invoke-stage/POST/authenticators/list"
      ]
     ]
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/authenticators/list/POST/ApiPermission.Test.skgoPasswordlessRestApiPasswordlessDBDEC1ED.POST..authenticators.list"
   }
  },
  "PasswordlessRestApiPasswordlessauthenticatorslistPOSTC3CF5FE2": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "COGNITO_USER_POOLS",
    "AuthorizerId": {
     "Ref": "CognitoAuthorizerPasswordlessE0617EE7"
    },
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "PasswordlessFido2PasswordlessA1DBE762",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "RequestParameters": {
     "method.request.querystring.rpId": true
    },
    "RequestValidatorId": {
     "Ref": "ReqValidator1EEDC831"
    },
    "ResourceId": {
     "Ref": "PasswordlessRestApiPasswordlessauthenticatorslistA442C7CC"
    },
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/authenticators/list/POST/Resource"
   }
  },
  "PasswordlessRestApiPasswordlessauthenticatorsdelete9D6ED765": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Ref": "PasswordlessRestApiPasswordlessauthenticatorsBF57B519"
    },
    "PathPart": "delete",
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/authenticators/delete/Resource"
   }
  },
  "PasswordlessRestApiPasswordlessauthenticatorsdeleteOPTIONS4ABBDA2C": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'POST'",
        "method.response.header.Access-Control-Max-Age": "'86400'"
       },
       "ResponseTemplates": {
        "application/json": {
         "Fn::Join": [
          "",
          [
           "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"https://",
           {
            "Fn::GetAtt": [
             "ExampleSpaDistribution74BEDF51",
             "DomainName"
            ]
           },
           "\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
          ]
         ]
        }
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Max-Age": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "PasswordlessRestApiPasswordlessauthenticatorsdelete9D6ED765"
    },
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/authenticators/delete/OPTIONS/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "These are public methods by intention",
       "id": "AwsSolutions-APIG4"
      },
      {
       "reason": "These are public methods by intention",
       "id": "AwsSolutions-COG4"
      }
     ]
    }
   }
  },
  "PasswordlessRestApiPasswordlessauthenticatorsdeletePOSTApiPermissionskgoPasswordlessRestApiPasswordlessDBDEC1EDPOSTauthenticatorsdelete46AA3CDC": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "PasswordlessFido2PasswordlessA1DBE762",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "PasswordlessRestApiPasswordless3F299C9C"
       },
       "/",
       {
        "Ref": "PasswordlessRestApiPasswordlessDeploymentStagev1C37D843A"
       },
       "/POST/authenticators/delete"
      ]
     ]
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/authenticators/delete/POST/ApiPermission.skgoPasswordlessRestApiPasswordlessDBDEC1ED.POST..authenticators.delete"
   }
  },
  "PasswordlessRestApiPasswordlessauthenticatorsdeletePOSTApiPermissionTestskgoPasswordlessRestApiPasswordlessDBDEC1EDPOSTauthenticatorsdeleteD43ECA3D": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "PasswordlessFido2PasswordlessA1DBE762",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "PasswordlessRestApiPasswordless3F299C9C"
       },
       "/test-invoke-stage/POST/authenticators/delete"
      ]
     ]
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/authenticators/delete/POST/ApiPermission.Test.skgoPasswordlessRestApiPasswordlessDBDEC1ED.POST..authenticators.delete"
   }
  },
  "PasswordlessRestApiPasswordlessauthenticatorsdeletePOST0EC54794": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "COGNITO_USER_POOLS",
    "AuthorizerId": {
     "Ref": "CognitoAuthorizerPasswordlessE0617EE7"
    },
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "PasswordlessFido2PasswordlessA1DBE762",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "RequestModels": {
     "application/json": {
      "Ref": "DeleteCredentialModelPasswordless3DF5E1E9"
     }
    },
    "RequestValidatorId": {
     "Ref": "ReqValidator1EEDC831"
    },
    "ResourceId": {
     "Ref": "PasswordlessRestApiPasswordlessauthenticatorsdelete9D6ED765"
    },
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/authenticators/delete/POST/Resource"
   }
  },
  "PasswordlessRestApiPasswordlessauthenticatorsupdate091E5688": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Ref": "PasswordlessRestApiPasswordlessauthenticatorsBF57B519"
    },
    "PathPart": "update",
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/authenticators/update/Resource"
   }
  },
  "PasswordlessRestApiPasswordlessauthenticatorsupdateOPTIONS3DC554BB": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'POST'",
        "method.response.header.Access-Control-Max-Age": "'86400'"
       },
       "ResponseTemplates": {
        "application/json": {
         "Fn::Join": [
          "",
          [
           "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"https://",
           {
            "Fn::GetAtt": [
             "ExampleSpaDistribution74BEDF51",
             "DomainName"
            ]
           },
           "\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
          ]
         ]
        }
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Max-Age": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "PasswordlessRestApiPasswordlessauthenticatorsupdate091E5688"
    },
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/authenticators/update/OPTIONS/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "These are public methods by intention",
       "id": "AwsSolutions-APIG4"
      },
      {
       "reason": "These are public methods by intention",
       "id": "AwsSolutions-COG4"
      }
     ]
    }
   }
  },
  "PasswordlessRestApiPasswordlessauthenticatorsupdatePOSTApiPermissionskgoPasswordlessRestApiPasswordlessDBDEC1EDPOSTauthenticatorsupdate5DC65ED7": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "PasswordlessFido2PasswordlessA1DBE762",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "PasswordlessRestApiPasswordless3F299C9C"
       },
       "/",
       {
        "Ref": "PasswordlessRestApiPasswordlessDeploymentStagev1C37D843A"
       },
       "/POST/authenticators/update"
      ]
     ]
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/authenticators/update/POST/ApiPermission.skgoPasswordlessRestApiPasswordlessDBDEC1ED.POST..authenticators.update"
   }
  },
  "PasswordlessRestApiPasswordlessauthenticatorsupdatePOSTApiPermissionTestskgoPasswordlessRestApiPasswordlessDBDEC1EDPOSTauthenticatorsupdate1FF58FD1": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "PasswordlessFido2PasswordlessA1DBE762",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "PasswordlessRestApiPasswordless3F299C9C"
       },
       "/test-invoke-stage/POST/authenticators/update"
      ]
     ]
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/authenticators/update/POST/ApiPermission.Test.skgoPasswordlessRestApiPasswordlessDBDEC1ED.POST..authenticators.update"
   }
  },
  "PasswordlessRestApiPasswordlessauthenticatorsupdatePOSTD5511859": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "COGNITO_USER_POOLS",
    "AuthorizerId": {
     "Ref": "CognitoAuthorizerPasswordlessE0617EE7"
    },
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "PasswordlessFido2PasswordlessA1DBE762",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "RequestModels": {
     "application/json": {
      "Ref": "UpdateCredentialModelPasswordless4AC08D92"
     }
    },
    "RequestValidatorId": {
     "Ref": "ReqValidator1EEDC831"
    },
    "ResourceId": {
     "Ref": "PasswordlessRestApiPasswordlessauthenticatorsupdate091E5688"
    },
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/authenticators/update/POST/Resource"
   }
  },
  "PasswordlessRestApiPasswordlesssigninchallengeCD03AB20": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "PasswordlessRestApiPasswordless3F299C9C",
      "RootResourceId"
     ]
    },
    "PathPart": "sign-in-challenge",
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/sign-in-challenge/Resource"
   }
  },
  "PasswordlessRestApiPasswordlesssigninchallengeOPTIONS555434BB": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type'",
        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'POST'",
        "method.response.header.Access-Control-Max-Age": "'86400'"
       },
       "ResponseTemplates": {
        "application/json": {
         "Fn::Join": [
          "",
          [
           "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"https://",
           {
            "Fn::GetAtt": [
             "ExampleSpaDistribution74BEDF51",
             "DomainName"
            ]
           },
           "\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
          ]
         ]
        }
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Max-Age": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "PasswordlessRestApiPasswordlesssigninchallengeCD03AB20"
    },
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/sign-in-challenge/OPTIONS/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "These are public methods by intention",
       "id": "AwsSolutions-APIG4"
      },
      {
       "reason": "These are public methods by intention",
       "id": "AwsSolutions-COG4"
      }
     ]
    }
   }
  },
  "PasswordlessRestApiPasswordlesssigninchallengePOSTApiPermissionskgoPasswordlessRestApiPasswordlessDBDEC1EDPOSTsigninchallenge55FDE019": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "PasswordlessFido2ChallengePasswordlessA5A0FD2C",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "PasswordlessRestApiPasswordless3F299C9C"
       },
       "/",
       {
        "Ref": "PasswordlessRestApiPasswordlessDeploymentStagev1C37D843A"
       },
       "/POST/sign-in-challenge"
      ]
     ]
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/sign-in-challenge/POST/ApiPermission.skgoPasswordlessRestApiPasswordlessDBDEC1ED.POST..sign-in-challenge"
   }
  },
  "PasswordlessRestApiPasswordlesssigninchallengePOSTApiPermissionTestskgoPasswordlessRestApiPasswordlessDBDEC1EDPOSTsigninchallengeF4422883": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "PasswordlessFido2ChallengePasswordlessA5A0FD2C",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "PasswordlessRestApiPasswordless3F299C9C"
       },
       "/test-invoke-stage/POST/sign-in-challenge"
      ]
     ]
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/sign-in-challenge/POST/ApiPermission.Test.skgoPasswordlessRestApiPasswordlessDBDEC1ED.POST..sign-in-challenge"
   }
  },
  "PasswordlessRestApiPasswordlesssigninchallengePOST4EE1F1B7": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "PasswordlessFido2ChallengePasswordlessA5A0FD2C",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "PasswordlessRestApiPasswordlesssigninchallengeCD03AB20"
    },
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    }
   },
   "DependsOn": [
    "ApiGatewayAccountSetting"
   ],
   "Metadata": {
    "aws:cdk:path": "skgo/Passwordless/RestApiPasswordless/Default/sign-in-challenge/POST/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "These are public methods by intention",
       "id": "AwsSolutions-APIG4"
      },
      {
       "reason": "These are public methods by intention",
       "id": "AwsSolutions-COG4"
      }
     ]
    }
   }
  },
  "SecretsTablePasswordless8B664A61": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "userNameHash",
      "AttributeType": "B"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "userNameHash",
      "KeyType": "HASH"
     }
    ],
    "TimeToLiveSpecification": {
     "AttributeName": "exp",
     "Enabled": true
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "skgo/SecretsTablePasswordless/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Don't need recovery for temporary hashes",
       "id": "AwsSolutions-DDB3"
      }
     ]
    }
   }
  },
  "Fido2AuthenticatorsTablePasswordlessBDEAEEE6": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "pk",
      "AttributeType": "S"
     },
     {
      "AttributeName": "sk",
      "AttributeType": "S"
     },
     {
      "AttributeName": "credentialId",
      "AttributeType": "B"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "GlobalSecondaryIndexes": [
     {
      "IndexName": "credentialId",
      "KeySchema": [
       {
        "AttributeName": "credentialId",
        "KeyType": "HASH"
       }
      ],
      "Projection": {
       "ProjectionType": "KEYS_ONLY"
      }
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "pk",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "sk",
      "KeyType": "RANGE"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "TimeToLiveSpecification": {
     "AttributeName": "exp",
     "Enabled": true
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "skgo/Fido2AuthenticatorsTablePasswordless/Resource"
   }
  },
  "UserPoolPasswordlessDefineAuthChallengeCognitoAD8ADD66": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "PasswordlessDefineAuthChallengePasswordlessEC6A3147",
      "Arn"
     ]
    },
    "Principal": "cognito-idp.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "UserPoolPasswordless1160377F",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "skgo/UserPoolPasswordless/DefineAuthChallengeCognito",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Don't require Cognito MFA",
       "id": "AwsSolutions-COG2"
      },
      {
       "reason": "Don't require Cognito Advanced Security",
       "id": "AwsSolutions-COG3"
      }
     ]
    }
   }
  },
  "UserPoolPasswordlessCreateAuthChallengeCognito180FCC2A": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "PasswordlessCreateAuthChallengePasswordless51381B62",
      "Arn"
     ]
    },
    "Principal": "cognito-idp.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "UserPoolPasswordless1160377F",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "skgo/UserPoolPasswordless/CreateAuthChallengeCognito",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Don't require Cognito MFA",
       "id": "AwsSolutions-COG2"
      },
      {
       "reason": "Don't require Cognito Advanced Security",
       "id": "AwsSolutions-COG3"
      }
     ]
    }
   }
  },
  "UserPoolPasswordlessVerifyAuthChallengeResponseCognitoF2C3A5A5": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "PasswordlessVerifyAuthChallengeResponsePasswordlessA0878D9F",
      "Arn"
     ]
    },
    "Principal": "cognito-idp.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "UserPoolPasswordless1160377F",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "skgo/UserPoolPasswordless/VerifyAuthChallengeResponseCognito",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Don't require Cognito MFA",
       "id": "AwsSolutions-COG2"
      },
      {
       "reason": "Don't require Cognito Advanced Security",
       "id": "AwsSolutions-COG3"
      }
     ]
    }
   }
  },
  "UserPoolPasswordlessPreSignUpCognitoA31058A0": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "PasswordlessPreSignupPasswordless4A742C04",
      "Arn"
     ]
    },
    "Principal": "cognito-idp.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "UserPoolPasswordless1160377F",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "skgo/UserPoolPasswordless/PreSignUpCognito",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Don't require Cognito MFA",
       "id": "AwsSolutions-COG2"
      },
      {
       "reason": "Don't require Cognito Advanced Security",
       "id": "AwsSolutions-COG3"
      }
     ]
    }
   }
  },
  "UserPoolPasswordlessPreTokenGenerationCognito4D677421": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "PasswordlessPreTokenPasswordless90BD5377",
      "Arn"
     ]
    },
    "Principal": "cognito-idp.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "UserPoolPasswordless1160377F",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "skgo/UserPoolPasswordless/PreTokenGenerationCognito",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Don't require Cognito MFA",
       "id": "AwsSolutions-COG2"
      },
      {
       "reason": "Don't require Cognito Advanced Security",
       "id": "AwsSolutions-COG3"
      }
     ]
    }
   }
  },
  "UserPoolPasswordless1160377F": {
   "Type": "AWS::Cognito::UserPool",
   "Properties": {
    "AccountRecoverySetting": {
     "RecoveryMechanisms": [
      {
       "Name": "verified_phone_number",
       "Priority": 1
      },
      {
       "Name": "verified_email",
       "Priority": 2
      }
     ]
    },
    "AdminCreateUserConfig": {
     "AllowAdminCreateUserOnly": true
    },
    "AutoVerifiedAttributes": [
     "email"
    ],
    "EmailVerificationMessage": "The verification code to your new account is {####}",
    "EmailVerificationSubject": "Verify your new account",
    "LambdaConfig": {
     "CreateAuthChallenge": {
      "Fn::GetAtt": [
       "PasswordlessCreateAuthChallengePasswordless51381B62",
       "Arn"
      ]
     },
     "DefineAuthChallenge": {
      "Fn::GetAtt": [
       "PasswordlessDefineAuthChallengePasswordlessEC6A3147",
       "Arn"
      ]
     },
     "PreSignUp": {
      "Fn::GetAtt": [
       "PasswordlessPreSignupPasswordless4A742C04",
       "Arn"
      ]
     },
     "PreTokenGeneration": {
      "Fn::GetAtt": [
       "PasswordlessPreTokenPasswordless90BD5377",
       "Arn"
      ]
     },
     "VerifyAuthChallengeResponse": {
      "Fn::GetAtt": [
       "PasswordlessVerifyAuthChallengeResponsePasswordlessA0878D9F",
       "Arn"
      ]
     }
    },
    "Policies": {
     "PasswordPolicy": {
      "MinimumLength": 8,
      "RequireLowercase": true,
      "RequireNumbers": true,
      "RequireSymbols": true,
      "RequireUppercase": true
     }
    },
    "SmsVerificationMessage": "The verification code to your new account is {####}",
    "UsernameAttributes": [
     "email"
    ],
    "VerificationMessageTemplate": {
     "DefaultEmailOption": "CONFIRM_WITH_CODE",
     "EmailMessage": "The verification code to your new account is {####}",
     "EmailSubject": "Verify your new account",
     "SmsMessage": "The verification code to your new account is {####}"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "skgo/UserPoolPasswordless/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Don't require Cognito MFA",
       "id": "AwsSolutions-COG2"
      },
      {
       "reason": "Don't require Cognito Advanced Security",
       "id": "AwsSolutions-COG3"
      }
     ]
    }
   }
  },
  "UserPoolPasswordlessUserPoolClientPasswordless04425BF3": {
   "Type": "AWS::Cognito::UserPoolClient",
   "Properties": {
    "AccessTokenValidity": 5,
    "AllowedOAuthFlows": [
     "implicit",
     "code"
    ],
    "AllowedOAuthFlowsUserPoolClient": true,
    "AllowedOAuthScopes": [
     "profile",
     "phone",
     "email",
     "openid",
     "aws.cognito.signin.user.admin"
    ],
    "CallbackURLs": [
     "https://example.com"
    ],
    "ExplicitAuthFlows": [
     "ALLOW_CUSTOM_AUTH",
     "ALLOW_REFRESH_TOKEN_AUTH"
    ],
    "GenerateSecret": false,
    "IdTokenValidity": 5,
    "PreventUserExistenceErrors": "LEGACY",
    "RefreshTokenValidity": 60,
    "SupportedIdentityProviders": [
     "COGNITO"
    ],
    "TokenValidityUnits": {
     "AccessToken": "minutes",
     "IdToken": "minutes",
     "RefreshToken": "minutes"
    },
    "UserPoolId": {
     "Ref": "UserPoolPasswordless1160377F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "skgo/UserPoolPasswordless/UserPoolClientPasswordless/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Don't require Cognito MFA",
       "id": "AwsSolutions-COG2"
      },
      {
       "reason": "Don't require Cognito Advanced Security",
       "id": "AwsSolutions-COG3"
      }
     ]
    }
   }
  },
  "CognitoAuthorizerPasswordlessE0617EE7": {
   "Type": "AWS::ApiGateway::Authorizer",
   "Properties": {
    "AuthorizerResultTtlInSeconds": 60,
    "IdentitySource": "method.request.header.Authorization",
    "Name": "skgoCognitoAuthorizerPasswordless5C95F7AD",
    "ProviderARNs": [
     {
      "Fn::GetAtt": [
       "UserPoolPasswordless1160377F",
       "Arn"
      ]
     }
    ],
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    },
    "Type": "COGNITO_USER_POOLS"
   },
   "Metadata": {
    "aws:cdk:path": "skgo/CognitoAuthorizerPasswordless/Resource"
   }
  },
  "ApiGatewayCloudWatchLogsRole4E03D2EF": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "apigateway.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "skgo/ApiGatewayCloudWatchLogsRole/Resource"
   }
  },
  "ApiGatewayAccountSetting": {
   "Type": "AWS::ApiGateway::Account",
   "Properties": {
    "CloudWatchRoleArn": {
     "Fn::GetAtt": [
      "ApiGatewayCloudWatchLogsRole4E03D2EF",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "skgo/ApiGatewayAccountSetting"
   }
  },
  "ReqValidator1EEDC831": {
   "Type": "AWS::ApiGateway::RequestValidator",
   "Properties": {
    "Name": "req-validator",
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    },
    "ValidateRequestBody": true,
    "ValidateRequestParameters": true
   },
   "Metadata": {
    "aws:cdk:path": "skgo/ReqValidator/Resource"
   }
  },
  "CompleteRegistrationModelPasswordlessBE02D60F": {
   "Type": "AWS::ApiGateway::Model",
   "Properties": {
    "ContentType": "application/json",
    "Description": "Create FIDO2 credential request body",
    "Name": "registerAuthenticatorComplete",
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    },
    "Schema": {
     "type": "object",
     "required": [
      "clientDataJSON_B64",
      "attestationObjectB64",
      "friendlyName"
     ],
     "properties": {
      "clientDataJSON_B64": {
       "type": "string",
       "minLength": 1
      },
      "attestationObjectB64": {
       "type": "string",
       "minLength": 1
      },
      "friendlyName": {
       "type": "string",
       "minLength": 1,
       "maxLength": 256
      },
      "transports": {
       "type": "array",
       "items": {
        "type": "string",
        "enum": [
         "usb",
         "nfc",
         "ble",
         "internal",
         "hybrid"
        ]
       }
      }
     },
     "$schema": "http://json-schema.org/draft-04/schema#"
    }
   },
   "Metadata": {
    "aws:cdk:path": "skgo/CompleteRegistrationModelPasswordless/Resource"
   }
  },
  "DeleteCredentialModelPasswordless3DF5E1E9": {
   "Type": "AWS::ApiGateway::Model",
   "Properties": {
    "ContentType": "application/json",
    "Description": "Delete FIDO2 credential request body",
    "Name": "credentialDelete",
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    },
    "Schema": {
     "type": "object",
     "required": [
      "credentialId"
     ],
     "properties": {
      "credentialId": {
       "type": "string",
       "minLength": 1
      }
     },
     "$schema": "http://json-schema.org/draft-04/schema#"
    }
   },
   "Metadata": {
    "aws:cdk:path": "skgo/DeleteCredentialModelPasswordless/Resource"
   }
  },
  "UpdateCredentialModelPasswordless4AC08D92": {
   "Type": "AWS::ApiGateway::Model",
   "Properties": {
    "ContentType": "application/json",
    "Description": "Update FIDO2 credential request body",
    "Name": "credentialUpdate",
    "RestApiId": {
     "Ref": "PasswordlessRestApiPasswordless3F299C9C"
    },
    "Schema": {
     "type": "object",
     "required": [
      "credentialId",
      "friendlyName"
     ],
     "properties": {
      "credentialId": {
       "type": "string",
       "minLength": 1
      },
      "friendlyName": {
       "type": "string",
       "minLength": 1,
       "maxLength": 256
      }
     },
     "$schema": "http://json-schema.org/draft-04/schema#"
    }
   },
   "Metadata": {
    "aws:cdk:path": "skgo/UpdateCredentialModelPasswordless/Resource"
   }
  },
  "Fido2ApiWebACLPasswordless": {
   "Type": "AWS::WAFv2::WebACL",
   "Properties": {
    "DefaultAction": {
     "Allow": {}
    },
    "Rules": [
     {
      "Action": {
       "Block": {}
      },
      "Name": "RateLimitPerIP",
      "Priority": 1,
      "Statement": {
       "RateBasedStatement": {
        "AggregateKeyType": "FORWARDED_IP",
        "ForwardedIPConfig": {
         "FallbackBehavior": "MATCH",
         "HeaderName": "X-Forwarded-For"
        },
        "Limit": 100
       }
      },
      "VisibilityConfig": {
       "CloudWatchMetricsEnabled": true,
       "MetricName": "RateLimitPerIP",
       "SampledRequestsEnabled": true
      }
     }
    ],
    "Scope": "REGIONAL",
    "VisibilityConfig": {
     "CloudWatchMetricsEnabled": true,
     "MetricName": "Fido2ApiWebACLPasswordless",
     "SampledRequestsEnabled": true
    }
   },
   "Metadata": {
    "aws:cdk:path": "skgo/Fido2ApiWebACLPasswordless"
   }
  },
  "WafAssociationPasswordless": {
   "Type": "AWS::WAFv2::WebACLAssociation",
   "Properties": {
    "ResourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":apigateway:",
       {
        "Ref": "AWS::Region"
       },
       "::/restapis/",
       {
        "Ref": "PasswordlessRestApiPasswordless3F299C9C"
       },
       "/stages/",
       {
        "Ref": "PasswordlessRestApiPasswordlessDeploymentStagev1C37D843A"
       }
      ]
     ]
    },
    "WebACLArn": {
     "Fn::GetAtt": [
      "Fido2ApiWebACLPasswordless",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "skgo/WafAssociationPasswordless"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/21S227bMAz9lr4rWpq+7NV10W1YuwbZ7TGQZcZjIoueKCXIDP/7JNlJliGAAR5eTB4dciHv5ws5v1MHnul6NzNYyf6rV3onYmjd84PsH4PegRflxk5oNEsyqI+X8OSPzqNiGIQ2FOqNI+tl/+awQVtoDcyfarAeff65TDXPqeZmxQq4I8vwEVQNji9DbyeekL3DKngkm6r+9Qexa1n2nyH/n0xhUHFyMhiEUW1Vq7WlGrYsv2TzHKzO3VC1sl+RgTw92QuZEQ2CH9aKGTzLIpmpoexjyblPKgfXInPmZKiJpF6o+eAodCl7woNQHTbKw0EdY0VuFV/tiw4nATJ8gs7QsY165QdfvLjGJpMdQayn4DSk1ZydqdGIX8H/ojqFTogai56+M7glkeEixLDDP+CyaNee1hTi1BX8DpHZD2WwVp7cOOG/2GuU1uRBCQyiPlrVUh1v75uqRoUziCc0UpD9iUTKnfEJlAan919HBnFQm/0iL+AnVEX5Is4obog0qnwZgygDe2pvynKdWjraY7w4kTecpEXbXOn5FnwXMpmSbI3j6aWbklt+t79/L+M3v9sy4sxFxbAFuRrtX5ubhW2OAwAA"
   },
   "Metadata": {
    "aws:cdk:path": "skgo/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "PasswordlessRestApiPasswordlessEndpointD4CE838B": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "PasswordlessRestApiPasswordless3F299C9C"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "PasswordlessRestApiPasswordlessDeploymentStagev1C37D843A"
      },
      "/"
     ]
    ]
   }
  },
  "UserPoolId": {
   "Value": {
    "Ref": "UserPoolPasswordless1160377F"
   }
  },
  "UserPoolClientId": {
   "Value": {
    "Ref": "UserPoolPasswordlessUserPoolClientPasswordless04425BF3"
   }
  },
  "Fido2Url": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "PasswordlessRestApiPasswordless3F299C9C"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "PasswordlessRestApiPasswordlessDeploymentStagev1C37D843A"
      },
      "/"
     ]
    ]
   }
  },
  "SpaUrl": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "ExampleSpaDistribution74BEDF51",
        "DomainName"
       ]
      }
     ]
    ]
   }
  },
  "SpaBucket": {
   "Value": {
    "Ref": "ExampleSpaBucketB0F9E86E"
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}